0.5 is out!
###########

:date: 2024-12-02 00:00:00
:status: hidden
:category: Release
:summary: Cubos 0.5 Release!

.. role:: dim
    :class: m-text m-dim

New 0.5 Features
================

This blog post covers the most important changes, but you can check out the full changelog in our `repository <https://github.com/GameDevTecnico/cubos/blob/main/CHANGELOG.md>`_.

On the Editor
-------------

Hold mode for Debug Camera. :dim:`(@jdbaracho)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It wasn't very convenient to have only a toogle to control the Debug Camera, so we added a hold mode.

Editor Feature 1 :dim:`(@Author1)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO: explain feature and why it is useful

On the Engine
-------------

Point Light Shadows :dim:`(@tomas7770)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Over the past couple releases, **shadows** have been gradually introduced to the engine's graphics
renderer, starting with spot light shadows, and then directional ones. Naturally, the next step was to
implement shadows for point lights, finally completing support for all types of lights.

Once again, point shadows are enabled by adding a component to the light entity, this time a
`PointShadowCaster <https://docs.cubosengine.org/structcubos_1_1engine_1_1PointShadowCaster.html>`_.
They behave similarly to spot shadows, lacking all the configurable values of the more complex directional shadows.
You may want to read the previous blog posts for more detailed information on this.

In terms of implementation, point shadows are also very similar to spot shadows, using a shared atlas texture
that stores shadow maps for every point light in a quadtree structure. However, because point lights cast light in
all directions, there are actually 6 atlas textures, one for each direction of a cube.

The final result of shadows can be seen in the `Shadows sample <https://github.com/GameDevTecnico/cubos/tree/main/engine/samples/render/shadows>`_.
Below is a screenshot of the sample with all light types casting shadows. Some tweaks have been done to better highlight the shadows.

.. image:: images/0.5/shadows_sample.png

Audio Support through the Audio Plugin  :dim:`(@Dageus, @diogomsmiranda)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This release is a significant milestone for the CUBOS engine, as it finally introduces Audio functionality!

The new ``audioPlugin`` leverages the previously implemented ``Audio Context`` to manage audio playback. It introduces two new components:

- **``AudioSource``**: Attach this component to entities to play audio files in supported formats such as FLAC, MP3 and WAV.
- **``AudioListener``**: Attach this component to an entity to capture audio from the scene.

With the plugin, you can now register listeners, and control audio sources with play, pause, and stop functionality. You can also customize audio playback by modifying the ``AudioSource`` properties for each entity. Adjust settings such as volume, pitch, and looping behavior to tailor the sound to your needs.
Due to restrictions in our audio backend, you can only have up to **three active listeners** at a time. For practical examples of how to use these new audio components (``AudioPlay``, ``AudioPause``, ``AudioStop``), check out our `Audio Sample <https://github.com/GameDevTecnico/cubos/blob/main/engine/samples/audio/main.cpp>`_.

Sub-title for this feature
**************************

TODO: more explaining

Collision detection between VoxelCollisionShapes :dim:`(@joaomanita)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The engine was only able to able to detect collisons between boxes, now we can add a `VoxelCollisionShape <https://docs.cubosengine.org/classcubos_1_1engine_1_1VoxelCollisionShape.html>`
to decompose a voxel shape into multiple box collision shapes.

UI text element using MSDF for text rendering :dim:`(@mkuritsu)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Another great addition to the CUBOS engine was the support for text rendering in the UI, this will greatly improve the capabilities 
for communicating with the player in future games developed with the engine.

This new features includes and `uiTextPlugin` that can be added wich contains the `UIText` component, this one contains all the data needed
to draw text on the screen. The plugin also adds two new asset types:

- **Font**: represents a font to be that can be used to create font atlases (.ttf and .otf supported).
- **FontAtlas**: atlas created from a given font with different configurable properties. 

In order to draw the text on the screen this plugins uses Multi Signed Distante Fields (MSDFs) with the help from `msdfgen <https://github.com/Chlumsky/msdfgen>`_ 
and `msdf-atlas-gen <https://github.com/Chlumsky/msdf-atlas-gen>`_, and `FreeType <https://freetype.org/>`_ to load different font formats. Below is a screenshot
taken from the UI sample available in the engine showcasing the text rendering in action.

.. image:: images/0.5/ui-text.png

**Note:** Currently only the ASCII charset is supported, UTF-8 support will be worked on in a future release.


On the Core
-----------

Core Feature 1 :dim:`(@Author3)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO: explain feature and why it is useful

Next Steps
==========

In the next release, which should be out by **TODO WHEN**, we're planning to work on the following features:

* Very cool feature 1.
* Very cool feature 2.
* ...

TODO: maybe some more stuff here if needed

You can check out the full list of stuff we want to get done in the `milestone <https://github.com/GameDevTecnico/cubos/milestone/29>`_ for the next release.
